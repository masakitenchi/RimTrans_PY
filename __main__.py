from TranslationExtractor import PE
from tkinter import *
from tkinter.ttk import *
from tkinter import filedialog
import lxml.etree as ET
from file import BFS, listdir_abspath
import os


def output(result: dict[str, ET._ElementTree], output_dir: str):
    for defType, tree in result.items():
        elemroot: ET._Element = tree.getroot()
        os.makedirs(f"{output_dir}/{defType}", exist_ok=True)
        base_filename = f"{output_dir}/{defType}/Extracted"
        ext = ".xml"
        for node in list(elemroot):
            if node.text == "" or node.text is None:
                root.remove(node)
        if os.path.exists(f"{base_filename}{ext}"):
            current = ET.parse(f"{base_filename}{ext}").getroot()
            for child in list(elemroot):
                current.append(child)
            current.write(
                f"{base_filename}{ext}",
                pretty_print=True,
                xml_declaration=True,
                encoding="utf-8",
            )
        else:
            tree.write(
                f"{base_filename}{ext}",
                pretty_print=True,
                xml_declaration=True,
                encoding="utf-8",
            )


def extract(ext_dir: str, recursive: bool, split: bool, append: bool):
    Label(Patch_Extract, text=f"Extracting from {ext_dir}...").grid()
    files = BFS(ext_dir, ["xml"]) if recursive else listdir_abspath(ext_dir, ["xml"])
    if split:
        output_dir = filedialog.askdirectory(mustexist=True, title="保存到……")
        for file in files:
            result = PE.extract([file])
            for defType, KVpair in result.items():
                elemroot: ET._Element = ET.Element("LanguageData")
                elemroot.addprevious(
                    ET.Comment("This file was generated by Patch_Extract.py")
                )
                tree: ET._ElementTree = ET.ElementTree(elemroot)
                basename = os.path.basename(os.path.dirname(file))
                file_name = (
                    os.path.basename(file).split(".")[0]
                    + (f"_{basename}" if append else "")
                    + ".xml"
                )
                os.makedirs(f"{output_dir}/{defType}", exist_ok=True)
                for key, value in KVpair.items():
                    defName = ET.SubElement(elemroot, key)
                    defName.text = value
                print(f"{output_dir}/{defType}/{file_name}")
                tree.write(
                    f"{output_dir}/{defType}/{file_name}",
                    pretty_print=True,
                    xml_declaration=True,
                    encoding="utf-8",
                )

    else:
        result = PE.extract(files)
        Label(Patch_Extract, text="Extraction complete!").grid()
        output_dir = filedialog.askdirectory(mustexist=True, title="保存到……")
        if output_dir != "":
            output(result, output_dir)


def Patch_Extract_Tab(root: Tk):
    ext_dir = StringVar(root, value="undefined", name="ext_dir")
    ext_dir.trace_add(
        "write",
        lambda a, b, c: (
            ext_button.config(state="normal")
            if ext_dir.get() != "undefined"
            else ext_button.config(state="disabled")
        ),
    )
    directory_label_text = StringVar(
        root, value=f"The directory of the patch is: {ext_dir.get()}"
    )
    directory_label = Label(
        root, textvariable=directory_label_text, wraplength=800
    )
    directory_label.grid()
    Button(
        root,
        text="Choose directory",
        command=lambda: (
            ext_dir.set(
                filedialog.askdirectory(mustexist=True, title="选择目标文件夹")
            ),
            directory_label_text.set(f"The directory of patches is: {ext_dir.get()}"),
        ),
    ).grid()
    recursive_var = BooleanVar(root, True)
    append_var = BooleanVar(root, False)
    split_var = BooleanVar(root, False)
    split_var.trace_add(
        "write",
        lambda a, b, c: (
            append_option.config(state="normal")
            if split_var.get()
            else append_option.config(state="disabled")
        ),
    )
    Checkbutton(root, text="Recursive", variable=recursive_var).grid()
    Label(root, text="递归查找").grid()
    Checkbutton(root, text="File Specific", variable=split_var).grid()
    Label(root, text="按文件分割").grid()
    append_option = Checkbutton(
        root, text="Append", variable=append_var, state="disabled"
    )
    append_option.grid()
    Label(root, text="追加文件夹名到文件名后").grid()
    ext_button = Button(
        root, text="Extract!", command=lambda: extract(ext_dir.get(), recursive_var.get(), split_var.get(), append_var.get()), state="disabled"
    )
    ext_button.grid()


if __name__ == "__main__":
    root = Tk()
    root.title("Pyscripts")
    root.geometry("800x600")
    root.resizable(False, False)
    notebook = Notebook(root, width=800, height=600)
    Patch_Extract = Frame(notebook)
    Translation_Clean = Frame(notebook)
    notebook.add(Patch_Extract, text="Patch Extractor")
    # notebook.add(Translation_Clean, text="Translation Cleaner")
    notebook.pack()
    Patch_Extract_Tab(Patch_Extract)
    
    root.mainloop()
